{"version":3,"sources":["01-strings-tests.js"],"names":[],"mappings":"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","file":"01-strings-tests-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar tasks = require('../task/01-strings-tasks');\nit.optional = require('../extensions/it-optional');\n\ndescribe('01-strings-tasks', function() {\n\n    it.optional('concatenateStrings should return concatenation of two strings', function() {\n        assert.equal('aabb', tasks.concatenateStrings('aa','bb'));\n        assert.equal('aa', tasks.concatenateStrings('aa',''));\n        assert.equal('bb', tasks.concatenateStrings('','bb'));\n    });\n\n    it.optional('getStringLength should return the length of string', function() {\n        assert.equal(5, tasks.getStringLength('aaaaa'), \"'aaaaa' length should be 5\");\n        assert.equal(0, tasks.getStringLength(''), \"'' length should be 0\");\n    });\n\n    it.optional('getStringFromTemplate should create a string from template using given parameters', function() {\n        assert.equal('Hello, John Doe!', tasks.getStringFromTemplate('John','Doe'));\n        assert.equal('Hello, Chuck Norris!', tasks.getStringFromTemplate('Chuck','Norris'));\n    });\n\n    it.optional('getFirstChar should return the first char from given string', function() {\n        assert.equal('J', tasks.getFirstChar('John Doe'));\n        assert.equal('c', tasks.getFirstChar('cat'));\n    });\n\n    it.optional('extractNameFromTemplate should parse the name from given string', function() {\n        assert.equal('John Doe', tasks.extractNameFromTemplate('Hello, John Doe!'));\n        assert.equal('Chuck Norris', tasks.extractNameFromTemplate('Hello, Chuck Norris!'));\n    });\n\n    it.optional('removeLeadingAndTrailingWhitespaces should remove leading and trailing whitespaces from the string', function() {\n        assert.equal('Abracadabra', tasks.removeLeadingAndTrailingWhitespaces('  Abracadabra'));\n        assert.equal('cat', tasks.removeLeadingAndTrailingWhitespaces('cat'));\n        assert.equal('Hello, World!', tasks.removeLeadingAndTrailingWhitespaces('\\tHello, World! '));\n    });\n\n    it.optional('repeatString should repeat string specified number of times', function() {\n        assert.equal('AAAAA', tasks.repeatString('A', 5));\n        assert.equal('catcatcat', tasks.repeatString('cat', 3));\n    });\n\n    it.optional('removeFirstOccurrences should remove all specified values from a string', function() {\n        assert.equal('To be or to be', tasks.removeFirstOccurrences('To be or not to be', ' not'));\n        assert.equal('I like legs', tasks.removeFirstOccurrences('I like legends', 'end'));\n        assert.equal('ABAB', tasks.removeFirstOccurrences('ABABAB','BA'));\n    });\n\n    it.optional('unbracketTag should remove first and last angle brackets from tag string', function() {\n        assert.equal('div', tasks.unbracketTag('<div>'));\n        assert.equal('span', tasks.unbracketTag('<span>'));\n        assert.equal('a', tasks.unbracketTag('<a>'));\n    });\n\n    it.optional('convertToUpperCase should convert all chars from specified string into upper case', function() {\n        assert.equal('THUNDERSTRUCK', tasks.convertToUpperCase('Thunderstruck'));\n        assert.equal('ABCDEFGHIJKLMNOPQRSTUVWXYZ', tasks.convertToUpperCase('abcdefghijklmnopqrstuvwxyz'));\n    });\n\n    it.optional('extractEmails should extract emails from string list delimeted by semicolons', function() {\n        assert.deepEqual(\n            ['angus.young@gmail.com', 'brian.johnson@hotmail.com', 'bon.scott@yahoo.com'],\n            tasks.extractEmails('angus.young@gmail.com;brian.johnson@hotmail.com;bon.scott@yahoo.com')\n        );\n        assert.deepEqual(\n            ['info@gmail.com'],\n            tasks.extractEmails('info@gmail.com')\n        );\n    });\n\n    it.optional('getRectangleString should return the string reprentation of rectangle with specified size', function() {\n        assert.equal(\n           '┌────┐\\n'+\n           '│    │\\n'+\n           '│    │\\n'+\n           '└────┘\\n',\n            tasks.getRectangleString(6, 4)\n        );\n        assert.deepEqual(\n           '┌┐\\n'+\n           '└┘\\n',\n            tasks.getRectangleString(2, 2)\n        );\n        assert.deepEqual(\n           '┌──────────┐\\n'+\n           '│          │\\n'+\n           '└──────────┘\\n',\n            tasks.getRectangleString(12, 3)\n        );\n    });\n\n    it.optional('encodeToRot13 should remove all specified values from a string', function() {\n        assert.equal('uryyb', tasks.encodeToRot13('hello'));\n        assert.equal('Jul qvq gur puvpxra pebff gur ebnq?', tasks.encodeToRot13('Why did the chicken cross the road?'));\n        assert.equal('To get to the other side!', tasks.encodeToRot13('Gb trg gb gur bgure fvqr!'));\n        assert.equal(\n            'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm',\n            tasks.encodeToRot13('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')\n        );\n    });\n\n    it.optional('isString should return true if argument ia a string', function() {\n        assert.equal(false, tasks.isString(), \"undefined\");\n        assert.equal(false, tasks.isString(null), \"null\");\n        assert.equal(false, tasks.isString([]), \"[]\");\n        assert.equal(true, tasks.isString('test'), \"test\");\n        assert.equal(true, tasks.isString(new String('test')), \"new String('test')\");\n    });\n    \n    it.optional('getCardId should return the index of card in the initial deck', function() {\n        [\n             'A♣','2♣','3♣','4♣','5♣','6♣','7♣','8♣','9♣','10♣','J♣','Q♣','K♣',\n             'A♦','2♦','3♦','4♦','5♦','6♦','7♦','8♦','9♦','10♦','J♦','Q♦','K♦',\n             'A♥','2♥','3♥','4♥','5♥','6♥','7♥','8♥','9♥','10♥','J♥','Q♥','K♥',\n             'A♠','2♠','3♠','4♠','5♠','6♠','7♠','8♠','9♠','10♠','J♠','Q♠','K♠' \n        ].forEach((val, index) => {\n            assert.equal(\n                index,\n                tasks.getCardId(val),\n                `Invalid id for card '${val}':`\n            )\n        });\n       \n    });\n});\n"]}