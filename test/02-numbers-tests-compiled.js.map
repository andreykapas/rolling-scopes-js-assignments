{"version":3,"sources":["02-numbers-tests.js"],"names":[],"mappings":"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","file":"02-numbers-tests-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar tasks = require('../task/02-numbers-tasks');\nit.optional = require('../extensions/it-optional');\n\ndescribe('02-numbers-tasks', function() {\n\n    it.optional('getRectangleArea should return a square of rectangle', function() {\n        assert.equal(50, tasks.getRectangleArea(5, 10));\n        assert.equal(25, tasks.getRectangleArea(5, 5));\n    });\n\n    it.optional('getCicleCircumference should return a circumference of cicle', function() {\n        assert.equal(31.41592653589793, tasks.getCicleCircumference(5));\n        assert.equal(19.729201864543903, tasks.getCicleCircumference(3.14));\n        assert.equal(0, tasks.getCicleCircumference(0));\n    });\n\n    it.optional('getAverage should return an average of two numbers', function() {\n        assert.equal(5, tasks.getAverage(5, 5));\n        assert.equal(5, tasks.getAverage(10, 0));\n        assert.equal(0, tasks.getAverage(-3, 3));\n        assert.equal(Number.MAX_VALUE-1, tasks.getAverage(Number.MAX_VALUE-2, Number.MAX_VALUE));\n    });\n\n    it.optional('getDistanceBetweenPoints should return a distance between points', function() {\n        assert.equal(1, tasks.getDistanceBetweenPoints(0, 0, 0, 1));\n        assert.equal(1, tasks.getDistanceBetweenPoints(0, 0, 1, 0));\n        assert.equal(18.027756377319946, tasks.getDistanceBetweenPoints(-5, 0, 10, -10));\n    });\n\n    it.optional('getLinearEquationRoot should return a root of linear equation', function() {\n        assert.equal(2, tasks.getLinearEquationRoot(5, -10));\n        assert.equal(-8, tasks.getLinearEquationRoot(1, 8));\n        assert.equal(0, tasks.getLinearEquationRoot(5, 0));\n    });\n    \n    it.optional('getAngleBetweenVectors should return a angle (in radians) between two linear vectors', function() {\n        assert.equal(Math.PI/2, tasks.getAngleBetweenVectors(1, 0, 0, 1));\n        assert.equal(Math.PI, tasks.getAngleBetweenVectors(0, 1, 0, -1));\n        assert.equal(Math.PI/2, tasks.getAngleBetweenVectors(0, -1, 1, 0));\n        assert.equal(0, tasks.getAngleBetweenVectors(0, 1, 0, 1));\n    });\n\n    it.optional('getLastDigit should return a last digit of the number', function() {\n        assert.equal(0, tasks.getLastDigit(100));\n        assert.equal(7, tasks.getLastDigit(37));\n        assert.equal(5, tasks.getLastDigit(5));\n        assert.equal(0, tasks.getLastDigit(0));\n    });\n\n    it.optional('parseNumberFromString should return a number from the given string representation', function() {\n        assert.equal(100, tasks.parseNumberFromString('100'));\n        assert.equal(37, tasks.parseNumberFromString('37'));\n        assert.equal(-525.5, tasks.parseNumberFromString('-525.5'));\n    });\n\n    it.optional('getParallelipidedDiagonal should return a diagonal length of the rectagular parallepiped', function() {\n        assert.equal(Math.sqrt(3), tasks.getParallelipidedDiagonal(1,1,1));\n        assert.equal(Math.sqrt(27), tasks.getParallelipidedDiagonal(3,3,3));\n        //assert.equal(Math.sqrt(14), tasks.getParallelipidedDiagonal(1,2,3));\n    });\n\n    it.optional('roundToPowerOfTen should return an number rounded to specified power of 10', function() {\n        assert.equal(1234, tasks.roundToPowerOfTen(1234,0));\n        assert.equal(1230, tasks.roundToPowerOfTen(1234,1));\n        assert.equal(1200, tasks.roundToPowerOfTen(1234,2));\n        assert.equal(1000, tasks.roundToPowerOfTen(1234,3));\n        \n        assert.equal(9678, tasks.roundToPowerOfTen(9678,0));\n        assert.equal(9680, tasks.roundToPowerOfTen(9678,1));\n        assert.equal(9700, tasks.roundToPowerOfTen(9678,2));\n        assert.equal(10000, tasks.roundToPowerOfTen(9678,3));\n    });\n\n    it.optional('isPrime should return true if specified number is prime', function() {\n        assert.equal(true, tasks.isPrime(2), \"2\");\n        assert.equal(true, tasks.isPrime(3), \"3\");\n        assert.equal(false, tasks.isPrime(4), \"4\");\n        assert.equal(true, tasks.isPrime(5), \"5\");\n        assert.equal(false, tasks.isPrime(6), \"6\");\n        assert.equal(true, tasks.isPrime(7), \"7\");\n        assert.equal(false, tasks.isPrime(8), \"8\");\n        assert.equal(false, tasks.isPrime(9), \"9\");\n        assert.equal(false, tasks.isPrime(10), \"10\");\n        assert.equal(true, tasks.isPrime(11), \"11\");\n        assert.equal(false, tasks.isPrime(12), \"12\");\n        assert.equal(true, tasks.isPrime(13), \"13\");\n        assert.equal(true, tasks.isPrime(113), \"113\");\n        assert.equal(false, tasks.isPrime(119), \"119\");\n    });\n\n    it.optional('toNumber should convert any value to number or return the default', function() {\n        assert.equal(0, tasks.toNumber(null, 0));\n        assert.equal(0, tasks.toNumber('test', 0));\n        assert.equal(1, tasks.toNumber('1', 0));\n        assert.equal(42, tasks.toNumber(42, 0));\n        assert.equal(42, tasks.toNumber(new Number(42), 0));\n        assert.equal(-1, tasks.toNumber(undefined, -1));\n    });\n});\n"]}