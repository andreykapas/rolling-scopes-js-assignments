{"version":3,"sources":["04-arrays-tests.js"],"names":[],"mappings":"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","file":"04-arrays-tests-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar tasks = require('../task/04-arrays-tasks');\nit.optional = require('../extensions/it-optional');\n\ndescribe('04-arrays-tasks', function() {\n\n    it.optional('findElement should return the index of specified value if exists', function () {\n        [\n            {\n                arr: ['Ace', 10, true],\n                value: 10,\n                expected: 1\n            },{\n                arr: ['Array', 'Number', 'string'],\n                value: 'Date',\n                expected: -1\n            },{\n                arr: [0, 1, 2, 3, 4, 5],\n                value: 5,\n                expected: 5\n            }\n        ].forEach(data => {\n            var actual = tasks.findElement(data.arr, data.value);\n            assert.equal(\n                data.expected,\n                actual,\n                `Index of '${data.value}' inside of [${data.arr}] = ${data.expected}, but actually ${actual}`\n            );\n        });\n    });\n\n\n    it.optional('generateOdds should return the array of odd numbers of specified size', function () {\n        [\n            {\n                len:      1,\n                expected: [ 1 ]\n            },{\n                len:      2,\n                expected: [ 1, 3 ]\n            },{\n                len:      5,\n                expected: [ 1, 3, 5, 7, 9 ]\n            },{\n                len:      16,\n                expected: [ 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 ]\n            } \n        ].forEach(data => {\n            assert.deepEqual(\n                data.expected,\n                tasks.generateOdds(data.len)\n            );\n        });\n    });\n\n\n    it.optional('doubleArray should return the specified array twice', function () {\n        [\n            {\n                arr: ['Ace', 10, true],\n                expected: ['Ace', 10, true,   'Ace', 10, true]\n            },{\n                arr: [0, 1, 2, 3, 4, 5],\n                expected: [0, 1, 2, 3, 4, 5,   0, 1, 2, 3, 4, 5]\n            },{\n                arr: [],\n                expected: []\n            }\n        ].forEach(data => {\n            var actual = tasks.doubleArray(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual,\n                `The result of doubling [${data.arr}] is not correct`\n            );\n        });\n    });\n\n\n    it.optional('getArrayOfPositives should return the array of positive values from specified array', function () {\n        [\n            {\n                arr:      [ 0, 1, 2, 3, 4, 5 ],\n                expected: [    1, 2, 3, 4, 5 ]\n            },{\n                arr:      [-1, 2, -5, -4, 0],\n                expected: [    2           ]\n            },{\n                arr:      [],\n                expected: []\n            }\n        ].forEach(data => {\n            var actual = tasks.getArrayOfPositives(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('getArrayOfStrings should return the array of string values from specified array', function () {\n        [\n            {\n                arr:      [ 0, 1, 'cat', 3, true, 'dog' ],\n                expected: [       'cat',          'dog' ]\n            },{\n                arr:      [ 1, 2, 3, 4, 5 ],\n                expected: [               ]\n            },{\n                arr:      [ 'cat', 'dog', 'raccon' ],\n                expected: [ 'cat', 'dog', 'raccon' ]\n            }\n        ].forEach(data => {\n            var actual = tasks.getArrayOfStrings(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('removeFalsyValues should return the specified array without falsy values', function () {\n        [\n            {\n                arr:      [ 0, false, 'cat', NaN, true, '' ],\n                expected: [           'cat',      true     ]\n            },{\n                arr:      [ 1, 2, 3, 4, 5, 'false' ],\n                expected: [ 1, 2, 3, 4, 5, 'false' ]\n            },{\n                arr:      [ false, 0, NaN, '', undefined ],\n                expected: [                              ]\n            }\n        ].forEach(data => {\n            var actual = tasks.removeFalsyValues(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('findAllOccurences should return the number of all occurences of specified item in an array', function () {\n        [\n            {\n                arr:      [ 0, 0, 1, 1, 1, 2 ],\n                item:     1,\n                expected: 3\n            },{\n                arr:      [ 1, 2, 3, 4, 5 ],\n                item:     0,\n                expected: 0\n            },{\n                arr:      [ 'a','b','c','c' ],\n                item:     'c',\n                expected: 2\n            },{\n                arr:      [ null, undefined, null ],\n                item:     null,\n                expected: 2\n            },{\n                arr:      [ true, 0, 1, 'true' ],\n                item:     true,\n                expected: 1\n            }\n        ].forEach(data => {\n            var actual = tasks.findAllOccurences(data.arr, data.item);\n            assert.equal(\n                data.expected,\n                actual,\n                `Number of occurences of ${JSON.stringify(data.item)} in ${JSON.stringify(data.arr)} is ${data.expected}, but actually ${actual})`\n            );\n        });\n    });\n\n\n    it.optional('getUpperCaseStrings should convert strings from specified array to uppercase', function () {\n        [\n            {\n                arr:      [ 'permanent-internship', 'glutinous-shriek', 'multiplicative-elevation' ],\n                expected: [ 'PERMANENT-INTERNSHIP', 'GLUTINOUS-SHRIEK', 'MULTIPLICATIVE-ELEVATION' ]\n            },{\n                arr:      [ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ],\n                expected: [ 'A', 'B', 'C', 'D', 'E', 'F', 'G' ]\n            }\n        ].forEach(data => {\n            var actual = tasks.getUpperCaseStrings(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('getStringsLength should convert strings from specified array to uppercase', function () {\n        [\n            {\n                arr:      [ '', 'a', 'bc', 'def', 'ghij' ],\n                expected: [  0,  1,    2,     3,     4   ]\n            },{\n                arr:      [ 'angular', 'react', 'ember' ],\n                expected: [        7,       5,       5  ]\n            }\n        ].forEach(data => {\n            var actual = tasks.getStringsLength(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('insertItem should insert an item at specified position', function () {\n        [\n            {\n                arr:      [ 1,    3, 4, 5 ],\n                item:          2,\n                index:    1,\n                expected: [ 1, 2, 3, 4, 5 ]\n            },{\n                arr:      [      1, 'b', 'c' ],\n                item:       'x',\n                index:    0,\n                expected: [ 'x', 1, 'b', 'c' ]\n            }\n        ].forEach(data => {\n            tasks.insertItem(data.arr, data.item, data.index);\n            assert.deepEqual(\n                data.expected,\n                data.arr\n            );\n        });\n    });\n\n\n    it.optional('getHead should return the n first items from the specified array', function () {\n        [\n            {\n                arr:      [ 1, 2, 3, 4, 5 ],\n                n:        2,\n                expected: [ 1, 2 ]\n            },{\n                arr:      [ 'a', 'b', 'c', 'd' ],\n                n:        3,\n                expected: [ 'a', 'b', 'c' ]\n            }\n        ].forEach(data => {\n            assert.deepEqual(\n                data.expected,\n                tasks.getHead(data.arr, data.n)\n            );\n        });\n    });\n\n\n    it.optional('getTail should return the n last items from the specified array', function () {\n        [\n            {\n                arr:      [ 1, 2, 3, 4, 5 ],\n                n:        2,\n                expected: [ 4, 5 ]\n            },{\n                arr:      [ 'a', 'b', 'c', 'd' ],\n                n:        3,\n                expected: [ 'b', 'c', 'd' ]\n            }\n        ].forEach(data => {\n            assert.deepEqual(\n                data.expected,\n                tasks.getTail(data.arr, data.n)\n            );\n        });\n    });\n\n\n    it.optional('toCsvText should convert two-dimentional numeric array to CSV format', function () {\n        [\n            {\n                arr: [\n                       [  0, 1, 2, 3, 4 ],\n                       [ 10,11,12,13,14 ],\n                       [ 20,21,22,23,24 ],\n                       [ 30,31,32,33,34 ]\n                ],\n                expected:\n                        '0,1,2,3,4\\n'\n                      +'10,11,12,13,14\\n'\n                      +'20,21,22,23,24\\n'\n                      +'30,31,32,33,34'\n            }, {\n                arr: [[]],\n                expected: ''\n            }\n        ].forEach(data => {\n            var actual = tasks.toCsvText(data.arr);\n            assert.equal(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('toArrayOfSquares should convert numeric array to the array of squares', function () {\n        [\n            {\n                arr:      [ 0, 1, 2, 3,  4,  5 ],\n                expected: [ 0, 1, 4, 9, 16, 25 ]\n            }, {\n                arr:      [  10,   100, -1 ],\n                expected: [ 100, 10000,  1 ]\n            }\n        ].forEach(data => {\n            var actual = tasks.toArrayOfSquares(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('getMovingSum should convert numeric array to the according array of moving sum', function () {\n        [\n            {\n                arr:      [ 1, 1, 1, 1, 1 ],\n                expected: [ 1, 2, 3, 4, 5 ]\n            }, {\n                arr:      [ 10, -10, 10, -10, 10 ],\n                expected: [ 10,   0, 10,   0, 10 ]\n            }, {\n                arr:      [ 0, 0, 0, 0, 0],\n                expected: [ 0, 0, 0, 0, 0]\n            }, {\n                arr:      [ 1, 2, 3,  4,  5,  6,  7,  8,  9, 10 ],\n                expected: [ 1, 3, 6, 10, 15, 21, 28, 36, 45, 55 ]\n            }\n        ].forEach(data => {\n            var actual = tasks.getMovingSum(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('getSecondItems should return every second item from the specified array', function () {\n        [\n            {\n                arr:      [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],\n                expected: [    2,    4,    6,    8,    10 ]\n            }, {\n                arr:      [ 'a', 'b', 'c' , null ],\n                expected: [      \"b\",       null ]\n            }, {\n                arr:      [ \"a\" ],\n                expected: [     ]\n            }\n        ].forEach(data => {\n            var actual = tasks.getSecondItems(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('propagateItemsByPositionIndex should propagate every item its position time', function () {\n        [\n            {\n                arr:      [],\n                expected: []\n             }, {\n                 arr:      [ 1 ],\n                 expected: [ 1 ]\n            }, {\n                arr:      [ 'a', 'b'     ],\n                expected: [ 'a', 'b','b' ]\n            }, {\n                arr:      [ 'a', 'b',     'c',          null                ],\n                expected: [ 'a', 'b','b', 'c','c','c',  null,null,null,null ]\n            }, {\n                arr:      [ 1, 2,   3,     4,       5         ],\n                expected: [ 1, 2,2, 3,3,3, 4,4,4,4, 5,5,5,5,5 ]\n            }\n        ].forEach(data => {\n            var actual = tasks.propagateItemsByPositionIndex(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('get3TopItems should return the 3 largest items from integer array', function () {\n        [\n            {\n                arr:      [],\n                expected: []\n             }, {\n                 arr:      [ 1,2 ],\n                 expected: [ 2,1 ]\n            }, {\n                arr:      [ 1, 2, 3 ],\n                expected: [ 3, 2, 1 ]\n            }, {\n                arr:      [ 1,2,3,4,5,6,7,8,9,10 ],\n                expected: [ 10,9,8 ]\n            }, {\n                arr:      [ 10, 10, 10, 10],\n                expected: [ 10, 10, 10 ]\n            }\n        ].forEach(data => {\n            var actual = tasks.get3TopItems(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('getPositivesCount should return the number of positive integers in the specified array', function () {\n        [\n            {\n                arr:      [],\n                expected: 0\n             }, {\n                 arr:      [ -1, 0, 1 ],\n                 expected: 1\n            }, {\n                arr:      [ 1, 2, 3 ],\n                expected: 3\n            }, {\n                arr:      [ null, 1, 'elephant' ],\n                expected: 1\n            }\n        ].forEach(data => {\n            var actual = tasks.getPositivesCount(data.arr);\n            assert.equal(\n                data.expected,\n                actual,\n                `Test failed for argument [${data.arr}]`\n            );\n        });\n    });\n\n\n    it.optional('sortDigitNamesByNumericOrder should sort digit names by its numeric value', function () {\n        [\n            {\n                arr:      [],\n                expected: []\n            }, {\n                arr:      [ 'nine','one' ],\n                expected: [ 'one', 'nine' ]\n            }, {\n                arr:      [ 'one','two','three' ],\n                expected: [ 'one','two', 'three' ]\n            }, {\n                arr:      [ 'nine','eight','nine','eight' ],\n                expected: [ 'eight','eight','nine','nine' ]\n            }, {\n                arr:      [ 'one','one','one','zero' ],\n                expected: [ 'zero','one','one','one' ]\n            }, {\n                arr:      [ 'nine','eight','seven','six','five','four','three','two','one','zero' ],\n                expected: [ 'zero','one','two','three','four','five','six','seven','eight','nine' ]\n             }\n        ].forEach(data => {\n            var actual = tasks.sortDigitNamesByNumericOrder(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('getItemsSum should return the sum of all items of numbers array', function () {\n        [\n            {\n                arr:      [  ],\n                expected: 0\n            },{\n                arr:      [ 1, 2, 3 ],\n                expected: 6\n            },{\n                arr:      [ 1, 10, 100, 1000 ],\n                expected: 1111\n            }\n        ].forEach(data => {\n            var actual = tasks.getItemsSum(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual,\n                `Test failed for [${data.arr}]`\n            );\n        });\n    });\n\n\n    it.optional('getFalsyValuesCount should return the number of falsy value in the specified array', function () {\n        [\n            {\n                arr:      [ ],\n                expected: 0\n            },{\n                arr:      [ 1, '', 3 ],\n                expected: 1\n            },{\n                arr:      [ -1, 'false', null, 0 ],\n                expected: 2\n            },{\n                arr:      [ null, undefined, NaN, false, 0, '' ],\n                expected: 6\n            }\n        ].forEach(data => {\n            var actual = tasks.getFalsyValuesCount(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual,\n                `Test failed for [${data.arr}]`\n            );\n        });\n    });\n\n\n    it.optional('toStringList should return the string list of passed arguments', function () {\n        [\n            {\n                arr:      [ 0, false, 'cat', NaN, true, '' ],\n                expected: '0,false,cat,NaN,true,'\n            },{\n                arr:      [ 1, 2, 3, 4, 5 ],\n                expected: '1,2,3,4,5'\n            },{\n                arr:      [ 'rock', 'paper', 'scissors' ],\n                expected: 'rock,paper,scissors'\n            }\n        ].forEach(data => {\n            var actual = tasks.toStringList(data.arr);\n            assert.equal(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('sortCitiesArray should sort the array of objects using two keys', function () {\n        [\n            {\n                arr:  [\n                   { country: 'Russia',  city: 'Moscow' },\n                   { country: 'Belarus', city: 'Minsk' },\n                   { country: 'Poland',  city: 'Warsaw' },\n                   { country: 'Russia',  city: 'Saint Petersburg' },\n                   { country: 'Poland',  city: 'Krakow' },\n                   { country: 'Belarus', city: 'Brest' }\n                ],\n                expected: [\n                   { country: 'Belarus', city: 'Brest' },\n                   { country: 'Belarus', city: 'Minsk' },\n                   { country: 'Poland',  city: 'Krakow' },\n                   { country: 'Poland',  city: 'Warsaw' },\n                   { country: 'Russia',  city: 'Moscow' },\n                   { country: 'Russia',  city: 'Saint Petersburg' }\n                ]\n            }, {\n                arr:  [\n                   { country: 'D', city: '1' },\n                   { country: 'E', city: '1' },\n                   { country: 'A', city: '2' },\n                   { country: 'B', city: '1' },\n                   { country: 'B', city: '2' },\n                   { country: 'A', city: '1' }\n                ],\n                expected: [\n                   { country: 'A', city: '1' },\n                   { country: 'A', city: '2' },\n                   { country: 'B', city: '1' },\n                   { country: 'B', city: '2' },\n                   { country: 'D', city: '1' },\n                   { country: 'E', city: '1' }\n                ]\n            }\n        ].forEach(data => {\n            var actual = tasks.sortCitiesArray(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('getIdentityMatrix should return the identity matrix of the specified size', function () {\n        [\n            {\n                n:         1,\n                expected: [[1]]\n            }, {\n                n:         2,\n                expected: [[1,0],\n                           [0,1]]\n            }, {\n                n:         5,\n                expected: [[1,0,0,0,0],\n                           [0,1,0,0,0],\n                           [0,0,1,0,0],\n                           [0,0,0,1,0],\n                           [0,0,0,0,1]]\n            }\n        ].forEach(data => {\n            var actual = tasks.getIdentityMatrix(data.n);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('getIntervalArray should return the array of integers from start to end (inclusive)', function () {\n        [\n            {\n                start:    1,\n                end:      5,\n                expected: [ 1, 2, 3, 4, 5 ]\n            }, {\n                start:   -2,\n                end:      2,\n                expected: [ -2, -1, 0, 1, 2 ]\n            }, {\n                start:    0,\n                end:    100,\n                expected: [\n                     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n                    20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n                    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n                    60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n                    80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n                    100\n                ]\n            }, {\n                start:    3,\n                end:      3,\n                expected: [ 3 ]\n            }\n        ].forEach(data => {\n            var actual = tasks.getIntervalArray(data.start, data.end);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('distinct should return an array of unique items from the specified array', function () {\n        [\n            {\n                arr:      [ 1, 2, 3, 3, 2, 1 ],\n                expected: [ 1, 2, 3 ]\n            }, {\n                arr:      [ 'a', 'a', 'a', 'a', 'a' ],\n                expected: [ 'a' ]\n            }, {\n                arr:      [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],\n                expected: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n            }, {\n                arr:      [ 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6 ],\n                expected: [ 1, 2, 3, 4, 5, 6 ]\n            }\n        ].forEach(data => {\n            var actual = tasks.distinct(data.arr);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n\n    it.optional('group should return a map of grouped data by key and value selector', function () {\n        [\n            {\n                arr: [\n                   { country: 'Belarus', city: 'Brest' },\n                   { country: 'Russia', city: 'Omsk' },\n                   { country: 'Russia', city: 'Samara' },\n                   { country: 'Belarus', city: 'Grodno' },\n                   { country: 'Belarus', city: 'Minsk' },\n                   { country: 'Poland', city: 'Lodz' }\n                ],\n                keySelector: item => item.country,\n                valueSelector: item => item.city,\n                expected: new Map([\n                   ['Belarus', ['Brest', 'Grodno', 'Minsk']],\n                   ['Russia', ['Omsk', 'Samara']],\n                   ['Poland', ['Lodz']]\n                ])\n            }, {\n                arr: [\n                   { artist: 'ACDC', album: 'Highway to Hell' },\n                   { artist: 'Metallica', album: \"Kill'em All\" },\n                   { artist: 'Deep Purple', album: 'Machine Head' },\n                   { artist: 'Metallica', album: 'And Justice for All' },\n                   { artist: 'ACDC', album: 'Back in Black' },\n                   { artist: 'Manowar', album: 'Kings of Metal' }\n                ],\n                keySelector: item => item.artist,\n                valueSelector: item => item.album,\n                expected: new Map([\n                   ['ACDC', ['Highway to Hell', 'Back in Black']],\n                   ['Metallica', [\"Kill'em All\", 'And Justice for All']],\n                   ['Deep Purple', ['Machine Head']],\n                   ['Manowar',['Kings of Metal']]\n                ])\n            }\n        ].forEach(data => {\n            var actual = tasks.group(data.arr, data.keySelector, data.valueSelector);\n            assert.deepEqual(\n                Array.from(data.expected),\n                Array.from(actual)\n            );\n        });\n    });\n\n\n    it.optional('selectMany should return an array of child items from the specified array', function () {\n        [\n            {\n                arr:      [[1, 2], [3, 4], [5, 6]],\n                childrenSelector : x => x,\n                expected: [ 1, 2, 3, 4, 5, 6 ]\n            }, {\n                arr:      [[11, 12, 13, 14, 15], [21, 22, ,23, 24, 25], [31, 32, 34, 35]],\n                childrenSelector : x => x.slice(0,2),\n                expected: [ 11, 12, 21, 22, 31, 32 ]\n            }, {\n                arr:     ['one','two','three'],\n                childrenSelector: x=>x.split(''),\n                expected: ['o','n','e','t','w','o','t','h','r','e','e']\n            }\n        ].forEach(data => {\n            var actual = tasks.selectMany(data.arr, data.childrenSelector);\n            assert.deepEqual(\n                data.expected,\n                actual\n            );\n        });\n    });\n\n\n    it.optional('getElementByIndexes should return an element from array by specified indexes', function () {\n        [\n            {\n                arr:      [ [1, 2], [3, 4], [5, 6] ],\n                indexes:  [ 0, 0 ],\n                expected: 1\n            }, {\n                arr:      ['one','two','three'],\n                indexes:  [ 2 ],\n                expected: 'three'\n            }, {\n                arr:      [[[1,2,3]]],\n                indexes:  [ 0, 0, 1 ],\n                expected: 2\n            }\n        ].forEach(data => {\n            var actual = tasks.getElementByIndexes(data.arr, data.indexes);\n            assert.equal(\n                data.expected,\n                actual,\n                `getElementByIndexes(${JSON.stringify(data.arr)}, ${JSON.stringify(data.indexes)}) returns an incorrect result. Expected ${data.expected}, but actual ${actual}`\n            );\n        });\n     });\n\n\n    it.optional('swapHeadAndTail should swap the head and tail of the array', function () {\n        [\n            {\n                arr:      [ 1 ],\n                expected: [ 1 ]\n            },{\n                arr:      [ 1, 2 ],\n                expected: [ 2, 1 ]\n            },{\n                arr:      [ 1, 2, 3 ],\n                expected: [ 3, 2, 1 ]\n            },{\n                arr:      [ 1, 2, 3, 4 ],\n                expected: [ 3, 4, 1, 2 ]\n            },{\n                arr:      [ 1, 2, 3, 4, 5 ],\n                expected: [ 4, 5, 3, 1, 2 ]\n            }\n        ].forEach(data => {\n            var actual = tasks.swapHeadAndTail(Array.from(data.arr));\n            assert.deepEqual(\n                data.expected,\n                actual,\n                `The result of swaping head and tail [${data.arr}] is not correct`\n            );\n        });\n    });\n\n\n    it.optional('Functions from 04-array-test.js should not use basic loops statements', function () {\n        Object.getOwnPropertyNames(tasks)\n              .filter(x => tasks[x] instanceof Function)\n              .forEach(f => {\n                  assert(\n                      !/([;{]\\s*(for|while)\\s*\\()|(\\.forEach\\s*\\()/.test(tasks[f].toString()),\n                      `Function \"${f}\" should not use basic loop statements (for, while or Array.forEach)! Please use specialized array methods (Array.map, Array.reduce etc).`\n                  );\n              });\n    });\n     \n});\n"]}