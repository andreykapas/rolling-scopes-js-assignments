{"version":3,"sources":["03-date-tests.js"],"names":[],"mappings":"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","file":"03-date-tests-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar tasks = require('../task/03-date-tasks');\nit.optional = require('../extensions/it-optional');\n\ndescribe('03-date-tasks', function() {\n\n    it.optional('parseDataFromRfc2822 should parse rfc2822 string into a date value', function () {\n        assert.equal(\n            new Date(1995, 11, 17, 3, 24, 0).valueOf(),\n            tasks.parseDataFromRfc2822('December 17, 1995 03:24:00').valueOf()\n        );\n\n        assert.equal(\n            1453816082000,\n            tasks.parseDataFromRfc2822('Tue, 26 Jan 2016 13:48:02 GMT').valueOf()\n        );\n\n        assert.equal(\n            895373940000,\n            tasks.parseDataFromRfc2822('Sun, 17 May 1998 03:00:00 GMT+01').valueOf()\n        );\n    });\n\n\n    it.optional('parseDataFromIso8601 should parse ISO 8601 string into a date value', function () {\n        assert.equal(\n            1453219657000,\n            tasks.parseDataFromIso8601('2016-01-19T16:07:37+00:00').valueOf()\n        );\n\n        assert.equal(\n            1453190857000,\n            tasks.parseDataFromIso8601('2016-01-19T08:07:37Z').valueOf()\n        );\n    });\n\n\n    it.optional('isLeapYear should true if specified year is leap', function () {\n        [\n            new Date(2000,1,1),\n            new Date(2012,1,1)\n        ].forEach(date => {\n            assert(\n                tasks.isLeapYear(date) == true,\n                `${date} is a leap year`\n            );\n        });\n\n        [\n            new Date(1900,1,1),\n            new Date(2001,1,1)\n        ].forEach(date => {\n            assert(\n                tasks.isLeapYear(date) == false,\n                `${date} is not a leap year`\n            );\n        });\n\n    });\n\n\n    it.optional('timeSpanToString should return the string represation of time span between two dates', function () {\n        [\n            {\n                startDate: new Date(2000,1,1,10,0,0),\n                endDate:   new Date(2000,1,1,11,0,0),\n                expected:  '01:00:00.000'\n            }, {\n                startDate: new Date(2000,1,1,10,0,0),\n                endDate:   new Date(2000,1,1,10,30,0),\n                expected:  '00:30:00.000'\n            }, {\n                startDate: new Date(2000,1,1,10,0,0),\n                endDate:   new Date(2000,1,1,10,0,20),\n                expected:  '00:00:20.000'\n            }, {\n                startDate: new Date(2000,1,1,10,0,0),\n                endDate:   new Date(2000,1,1,10,0,0,250),\n                expected:  '00:00:00.250'\n            }, {\n                startDate: new Date(2000,1,1,10,0,0),\n                endDate:   new Date(2000,1,1,15,20,10,453),\n                expected:  '05:20:10.453'\n            }\n        ].forEach(data => {\n            assert.equal(\n                data.expected,\n                tasks.timeSpanToString(data.startDate, data.endDate)\n            );\n        });\n\n    });\n    \n    \n    it.optional('angleBetweenClockHands should returns the angle bettween clock hands for specified Greenwich datetime', function () {\n        [\n            {\n                date:     Date.UTC(2016,3,5, 0, 0),\n                expected: 0\n            }, {\n                date:     Date.UTC(2016,3,5, 3, 0),\n                expected: Math.PI/2\n            }, {\n                date:     Date.UTC(2016,3,5,15, 0),\n                expected: Math.PI/2\n            }, {\n                date:     Date.UTC(2016,3,5, 6, 0),\n                expected: Math.PI\n            }, {\n                date:     Date.UTC(2016,3,5,18, 0),\n                expected: Math.PI\n            }, {\n                date:     Date.UTC(2016,3,5, 9, 0),\n                expected: Math.PI/2\n            }, {\n                date:     Date.UTC(2016,3,5,21, 0),\n                expected: Math.PI/2\n            }, {\n                date:     Date.UTC(2016,3,5,14,20),\n                expected: 0.8726646259971648\n            }, {\n                date:     Date.UTC(2016,3,5,23,55),\n                expected: 0.4799655442984406\n            }\n        ].forEach(data => {\n            assert.equal(\n                tasks.angleBetweenClockHands(new Date(data.date)),\n                data.expected.toFixed(12),\n                `Incorrect result for angleBetweenClockHands(${new Date(data.date).toUTCString()}):`   \n            );\n        });\n    });\n\n});\n"]}