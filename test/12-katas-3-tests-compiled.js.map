{"version":3,"sources":["12-katas-3-tests.js"],"names":[],"mappings":"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","file":"12-katas-3-tests-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar tasks = require('../task/12-katas-3-tasks');\nit.optional = require('../extensions/it-optional');\n\ndescribe('12-katas-3-tasks', function() {\n\n    it.optional('findStringInSnakingPuzzle shoud return true if word occurrs in the specified puzzle', () => {\n        var puzzle = [ \n            'ANGULAR',\n            'REDNCAE',\n            'RFIDTCL',\n            'AGNEGSA',\n            'YTIRTSP',\n        ];\n        var puzzleToString = (p) => p.map(x=>'       '+x).join('\\n');\n        [\n            'ANGULAR', 'REACT', 'UNDEFINED', 'RED', 'STRING', 'CLASS', 'ARRAY'\n        ].forEach(word => {\n            assert(\n                tasks.findStringInSnakingPuzzle(puzzle, word),\n                `Word \"${word}\" occurrs in puzzle\\n${puzzleToString(puzzle)}`\n            );\n        });\n\n        [\n            'FUNCTION', 'NULL', 'EMBER', 'HOISTING', 'GIT', 'ARENA'\n        ].forEach(word => {\n            assert(\n                !tasks.findStringInSnakingPuzzle(puzzle, word),\n                `Word \"${word}\" does not occurr in puzzle\\n${puzzleToString(puzzle)}`\n            );\n        });\n    });\n\n\n    it.optional('getPermutations should return all possible string permutations', () => {\n        [\n            {\n                chars:    'a',\n                expected: [ 'a' ]\n            },{\n                chars:    'ab',\n                expected: [ 'ab', 'ba' ]\n            },{\n                chars:    'abc',\n                expected: [ 'abc', 'acb', 'bac', 'bca', 'cab', 'cba' ]\n            },{\n                chars:    'abcd',\n                expected: [ \n                    'abcd', 'abdc', 'acbd', 'acdb', 'adbc', 'adcb', \n                    'bacd', 'badc', 'bcad', 'bcda', 'bdac', 'bdca', \n                    'cabd', 'cadb', 'cbad', 'cbda', 'cdab', 'cdba', \n                    'dabc', 'dacb', 'dbac', 'dbca', 'dcab', 'dcba'\n                ]\n            }\n        ].forEach(data => {\n            assert.deepEqual(\n                Array.from(tasks.getPermutations(data.chars)).sort(),\n                data.expected,\n                `Incorrect permutations of \"${data.chars}\"`\n            );\n        });\n        assert.equal(\n            Array.from(tasks.getPermutations('12345')).length,\n            120,\n            'Number of 5 chars permutations should be 120.'\n        );\n    });\n\n\n    it.optional('getMostProfitFromStockQuotes should return the max profit from stock trading', () => {\n        [\n            {\n                quotes:   [ 1, 2, 3, 4, 5, 6 ],\n                expected: 15\n            },{\n                quotes:   [ 6, 5, 4, 3, 2, 1 ],\n                expected: 0\n            },{\n                quotes:   [ 1, 6, 5, 10, 8, 7 ],\n                expected: 18\n            },{\n                quotes:   [ 31, 312, 3, 35, 33, 3, 44, 123, 126, 2, 4, 1 ],\n                expected: 798\n            },{\n                quotes:   [ 1, 20, 1, 30, 1, 40, 1, 50, 1, 40, 1, 30, 1, 20, 1 ],\n                expected: 343\n            }\n        ].forEach(data => {\n            var actual = tasks.getMostProfitFromStockQuotes(data.quotes);\n            assert.equal(\n                actual,\n                data.expected,\n                `Most profit for [${data.quotes}] quotes is ${data.expected} but actually ${actual}`\n            );\n        });\n    });\n\n\n    it.optional('urlShortener should return encoded string shorter than original url', () => {\n        [\n            'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul',\n            'https://en.wikipedia.org/wiki/Percent-encoding#Types_of_URI_characters',\n            'https://en.wikipedia.org/wiki/Binary-to-text_encoding#Encoding_plain_text'\n        ].forEach(data => {\n            var urlShortener = new tasks.UrlShortener();\n            var actual = urlShortener.encode(data);\n            assert(\n                data.length / actual.length > 1.5,\n                `urlShortener.encode for \"${data}\" returns \"${actual}\" that is only ${data.length/actual.length} times less than original url`\n            );\n        });\n    });\n\n\n    it.optional('urlShortener should decode shorten link to to the original url', () => {\n        [\n            'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul',\n            'https://www.example.com/catalog.html?search=mobile+phones&price=100-200&year=2016#top_links',\n        ].forEach(data => {\n            var urlShortener = new tasks.UrlShortener();\n            var encoded = urlShortener.encode(data);\n            var actual = urlShortener.decode(encoded);\n            assert.equal(\n                data,\n                actual,\n                `urlShortener.encode for \"${data}\" returns \"${encoded}\" but decode returns \"${actual}\"`\n            );\n        });\n    });\n\n});\n"]}