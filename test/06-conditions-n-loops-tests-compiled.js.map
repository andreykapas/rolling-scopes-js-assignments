{"version":3,"sources":["06-conditions-n-loops-tests.js"],"names":[],"mappings":"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","file":"06-conditions-n-loops-tests-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar tasks = require('../task/06-conditions-n-loops-tasks');\nit.optional = require('../extensions/it-optional');\n\ndescribe('06-conditions-n-loops-tasks', function() {\n\n    it.optional('getFizzBuzz should return the output value according specification', () => {\n        [\n            1, 2, 4, 7, 8, 11, 13, 14, 16, 17, 19, 22, 23, 26, 28, 29, 31, 32, 34,\n           37, 38, 41, 43, 44, 47, 49, 52, 53, 56, 58, 59, 61, 62, 64, 67, 68, 71,\n           73, 74, 76, 77, 79, 82, 83, 86, 88, 89, 91, 92, 94, 97, 98\n        ].forEach(num => {\n            var actual = tasks.getFizzBuzz(num);\n            assert.equal(\n                actual,\n                num,\n                `getFizzBuzz shoud return ${num} for ${num}, but actually ${actual}`\n            )\n        });\n\n        [\n            3,  6,  9, 12, 18, 21, 24, 27,\n           33, 36, 39, 42, 48, 51, 54, 57,\n           63, 66, 69, 72, 78, 81, 84, 87,\n           93, 96, 99\n        ].forEach(num => {\n            var actual = tasks.getFizzBuzz(num);\n            assert.equal(\n                actual,\n                'Fizz',\n                `getFizzBuzz shoud return 'Fizz' for ${num}, but actually ${actual}`\n            )\n        });\n\n        [\n            5, 10, 20, 25, 35, 40, 50, 55, 65, 70, 80, 85, 95, 100\n        ].forEach(num => {\n            var actual = tasks.getFizzBuzz(num);\n            assert.equal(\n                actual,\n                'Buzz',\n                `getFizzBuzz shoud return 'Buzz' for ${num}, but actually ${actual}`\n            )\n        });\n\n        [\n            15, 30, 45, 60, 75, 90\n        ].forEach(num => {\n            var actual = tasks.getFizzBuzz(num);\n            assert.equal(\n                actual,\n                'FizzBuzz',\n                `getFizzBuzz shoud return 'FizzBuzz' for ${num}, but actually ${actual}`\n            )\n        });\n\n    });\n\n\n    it.optional('getFactorial should return the functorial of given number', () => {\n        [\n            { n:  1, expected:       1 },\n            { n:  5, expected:     120 },\n            { n: 10, expected: 3628800 }\n        ].forEach(data => {\n            var actual = tasks.getFactorial(data.n);\n            assert.equal(\n                actual,\n                data.expected,\n                `${data.n}! = ${data.expected}, but actual ${actual}`\n            )\n        });\n    });\n\n\n    it.optional('getSumBetweenNumbers should return the sum inside the specified interval', () => {\n        [\n            { n1:  1, n2:  2, expected:  3 },\n            { n1:  5, n2: 10, expected: 45 },\n            { n1: -1, n2:  1, expected:  0 }\n        ].forEach(data => {\n            var actual = tasks.getSumBetweenNumbers(data.n1, data.n2);\n            assert.equal(\n                actual,\n                data.expected,\n                `Sum of [${data.n1},${data.n2}] = ${data.expected}, but actual ${actual}`\n            )\n        });\n    });\n\n\n    it.optional('isTriangle should check if triangle can be built', () => {\n        [\n            { sides: [ 1, 2, 3] , expected:  false },\n            { sides: [ 3, 4, 5] , expected:  true },\n            { sides: [ 10, 1, 1] , expected:  false },\n            { sides: [ 10, 10, 10] , expected:  true },\n        ].forEach(data => { \n            [[0,1,2], [0,2,1], [1,2,0], [1,0,2], [2,0,1], [2,1,0]].forEach(idx => {\n                var actual = tasks.isTriangle(\n                    data.sides[idx[0]],\n                    data.sides[idx[1]],\n                    data.sides[idx[2]]\n                );\n                assert.equal(\n                    actual,\n                    data.expected,\n                    `Triangle from [${data.sides.toString()}]: expected ${data.expected} but actual ${actual}`\n                );\n            })\n        });\n    });\n\n\n    it.optional('doRectanglesOverlap should return true if rectangles overlap', () => {\n        [\n            { \n                rect1:    { top: 0, left: 0, width: 10, height: 10 },\n                rect2:    { top: 5, left: 5, width: 10, height: 10 },\n                expected: true\n            },{\n                rect1:    { top: 10, left: 10, width: 10, height: 10 },\n                rect2:    { top:  5, left: 5, width: 15, height: 15 },\n                expected: true\n            },{\n                rect1:    { top: 10, left: 10, width: 50, height:  5 },\n                rect2:    { top:  5, left: 5,  width: 10, height: 50 },\n                expected: true\n            },{\n                rect1:    { top:  0, left:  0, width: 90, height: 90 },\n                rect2:    { top: 25, left: 25, width: 10, height: 10 },\n                expected: true\n            },{\n                rect1:    { top:  5, left:  5, width: 20, height: 20 },\n                rect2:    { top:  5, left:  5, width: 40, height: 10 },\n                expected: true\n            },{\n                rect1:    { top:  5, left:  5, width: 20, height: 20 },\n                rect2:    { top: 30, left:  5, width: 40, height: 10 },\n                expected: false\n            },{\n                rect1:    { top:  0, left:  0, width: 90, height: 90 },\n                rect2:    { top: 25, left:100, width: 10, height: 10 },\n                expected: false\n            }\n        ].forEach(data => { \n            assert.equal(\n                tasks.doRectanglesOverlap(data.rect1, data.rect2),\n                data.expected,\n                `doRectanglesOverlap(\\n   ${JSON.stringify(data.rect1)},\\n   ${JSON.stringify(data.rect2)}\\n): expected ${data.expected}`\n            );\n        });\n    });\n\n\n    it.optional('isInsideCircle should return true if point lies inside of the specified circle', () => {\n        [\n            { \n                circle:   { center: { x: 0, y: 0 }, radius: 10 },\n                point:    { x: 0, y: 0 },\n                expected: true\n            },{ \n                circle:   { center: { x: 5, y: 5 }, radius: 6 },\n                point:    { x: 5, y: 10.99 },\n                expected: true\n            },{ \n                circle:   { center: { x: 0, y: 0 }, radius: 10 },\n                point:    { x: 0, y: 10 },\n                expected: false\n            },{ \n                circle:   { center: { x: 5, y: 5 }, radius: 6 },\n                point:    { x: 0, y: 0 },\n                expected: false\n            },{ \n                circle:   { center: { x: 2, y: 2 }, radius: 1 },\n                point:    { x: 2.8, y: 2.8 },\n                expected: false\n            },{\n                circle:   { center: { x: 2, y: 2 }, radius: 4 },\n                point:    { x: -1, y: -1 },\n                expected: false\n            },{\n                circle:   { center: { x: 2, y: 2 }, radius: 4 },\n                point:    { x: 2, y: 6.1 },\n                expected: false\n            }\n        ].forEach(data => { \n            assert.equal(\n                tasks.isInsideCircle(data.circle, data.point),\n                data.expected,\n                `isInsideCircle(\\n   ${JSON.stringify(data.circle)},\\n   ${JSON.stringify(data.point)}\\n): expected ${data.expected}`\n            );\n        });\n    });\n\n\n    it.optional('findFirstSingleChar should return the first unrepeated char from string', () => {\n        [\n            { str: 'The quick brown fox jumps over the lazy dog', expected: 'T' },\n            { str: 'abracadabra', expected: 'c' },\n            { str: 'entente', expected: null }\n        ].forEach(data => {\n            var actual = tasks.findFirstSingleChar(data.str);\n            assert.equal(\n                actual,\n                data.expected,\n                `First single char of '${data.str}' = '${data.expected}', but actual '${actual}'`\n            )\n        });\n    });\n\n\n    it.optional('getIntervalString should return the string representation of math interval', () => {\n        [\n            {\n                a: 0,\n                b: 1,\n                isStartIncluded: true,\n                isEndIncluded: true,\n                expected: '[0, 1]'\n            },{\n                a: 0,\n                b: 1,\n                isStartIncluded: true,\n                isEndIncluded: false,\n                expected: '[0, 1)'\n            },{\n                a: 0,\n                b: 1,\n                isStartIncluded: false,\n                isEndIncluded: true,\n                expected: '(0, 1]'\n            },{\n                a: 0,\n                b: 1,\n                isStartIncluded: false,\n                isEndIncluded: false,\n                expected: '(0, 1)'\n            },{\n                a: 5,\n                b: 3,\n                isStartIncluded: true,\n                isEndIncluded: true,\n                expected: '[3, 5]'\n            }\n        ].forEach(data => {\n            var actual = tasks.getIntervalString(data.a, data.b, data.isStartIncluded, data.isEndIncluded);\n            assert.equal(\n                actual,\n                data.expected,\n                `getIntervalString(${data.a}, ${data.b}, ${data.isStartIncluded}, ${data.isEndIncluded}) shoud return '${data.expected}', but actually '${actual}'`\n            )\n        });\n    });\n\n\n    it.optional('reverseString should return the specified string in reverse order', () => {\n        [\n            { str: 'The quick brown fox jumps over the lazy dog', expected: 'god yzal eht revo spmuj xof nworb kciuq ehT' },\n            { str: 'abracadabra', expected: 'arbadacarba' },\n            { str: 'rotator', expected: 'rotator' },\n            { str: 'noon', expected : 'noon'}\n        ].forEach(data => {\n            var actual = tasks.reverseString(data.str);\n            assert.equal(\n                actual,\n                data.expected,\n                `Reversed '${data.str}' = '${data.expected}', but actual '${actual}'`\n            )\n        });\n    });\n\n\n    it.optional('reverseInteger should return the specified number in reverse order', () => {\n        [\n            { num: 12345, expected: 54321 },\n            { num:  1111, expected:  1111 },\n            { num: 87354, expected: 45378 },\n            { num: 34143, expected :34143 }\n        ].forEach(data => {\n            var actual = tasks.reverseInteger(data.num);\n            assert.equal(\n                actual,\n                data.expected,\n                `Reversed ${data.num} = ${data.expected}, but actual ${actual}`\n            )\n        });\n    });\n\n\n    it.optional('isCreditCardNumber should validate CCN', () => {\n        [\n            79927398713,\n            4012888888881881,\n            5123456789012346,\n            378282246310005,\n            371449635398431,\n            378734493671000,\n            5610591081018250,\n            30569309025904,\n            38520000023237,\n            6011111111111117,\n            6011000990139424,\n            3530111333300000,\n            3566002020360505,\n            5555555555554444,\n            5105105105105100,\n            4111111111111111,\n            4012888888881881,\n            4222222222222,\n            5019717010103742,\n            6331101999990016,\n            54891243456789010\n        ].forEach(ccn => {\n            assert(\n                tasks.isCreditCardNumber(ccn),\n                `CCN ${ccn} is valid, but actually not`\n            )\n        });\n\n\n        [\n            4571234567890111,\n            5436468789016589,\n            4916123456789012,\n            371449635398430,\n            9112893456789010\n        ].forEach(ccn => {\n            assert(\n                tasks.isCreditCardNumber(ccn) == false,\n                `CCN ${ccn} is not valid, but actually yes`\n            )\n        });\n\n    });\n\n\n    it.optional('getDigitalRoot should return the cyclic sum of all digits', () => {\n        [\n            { num: 12345, expected: 6 },\n            { num: 23456, expected: 2 },\n            { num: 10000, expected: 1 },\n            { num: 165536, expected: 8 }\n        ].forEach(data => {\n            var actual = tasks.getDigitalRoot(data.num);\n            assert.equal(\n                actual,\n                data.expected,\n                `GetDigitalRoot(${data.num}) = ${data.expected}, but actual ${actual}`\n            )\n        });\n    });\n\n\n   it.optional('isBracketsBalanced should check the balanced brackets', () => {\n        [\n            '[]', '[[][][[]]]', '[[][]]', '', '<>', '{}', '()', '<()>', '{<>}', '[{}]',\n            '[{(<()[]{}<>>)}]', '{}<>()[]','{<>}{()}[[]](())'\n        ].forEach(str => {\n            assert(\n                tasks.isBracketsBalanced(str),\n                `'${str}' has balanced brackets, but actually not`\n            )\n        });\n\n\n        [\n            '[[]', '][', '[][][][][[]', '{)', '<]','(}', '[{]}','{<}>','{{[(])}}','{}()[]<',\n            '{','(','[','({}[]<>(((())))','{{[]}}>'\n        ].forEach(str => {\n            assert(\n                tasks.isBracketsBalanced(str) == false,\n                `'${str}' has unbalanced brackets, but actually yes`\n            )\n        });\n\n    });\n\n\n    it.optional('toNaryString should return the n-ary string representation of number', () => {\n        [\n            { num: 1024,  n: 2, expected: '10000000000' },\n            { num: 6561,  n: 3, expected: '100000000' },\n            { num:  365,  n: 2, expected: '101101101' },\n            { num:  365,  n: 3, expected: '111112' },\n            { num:  365,  n: 4, expected: '11231' },\n            { num:  365,  n: 5, expected: '2430' },\n            { num:  365,  n: 6, expected: '1405' },\n            { num:  365,  n: 7, expected: '1031' },\n            { num:  365,  n: 9, expected: '445' },\n            { num:  365,  n:10, expected: '365' },\n        ].forEach(data => {\n            var actual = tasks.toNaryString(data.num, data.n);\n            assert.equal(\n                actual,\n                data.expected,\n                `${data.num} with radix ${data.n} = ${data.expected}, but actual ${actual}`\n            )\n        });\n    });\n\n\n    it.optional('getCommonDirectoryPath should return the n-ary string representation of number', () => {\n        [\n            {\n                pathes: ['/web/images/image1.png', '/web/images/image2.png'],\n                expected: '/web/images/'\n            },{\n                pathes: ['/web/assets/style.css', '/web/scripts/app.js',  'home/setting.conf'],\n                expected: ''\n            },{\n                pathes:  ['/web/assets/style.css', '/.bin/mocha',  '/read.me'],\n                expected: '/'\n            },{\n                pathes:  ['/web/favicon.ico', '/web-scripts/dump', '/webalizer/logs'],\n                expected: '/'\n            }\n        ].forEach(data => {\n            var actual = tasks.getCommonDirectoryPath(data.pathes, data.n);\n            assert.equal(\n                actual,\n                data.expected,\n                `Common directory path fo [${data.pathes}] = ${data.expected}, but actual ${actual}`\n            )\n        });\n    });\n\n\n    it.optional('getMatrixProduct should return the product of two specified matrices', () => {\n        [\n            {\n                m1: [\n                    [ 1, 0, 0 ],\n                    [ 0, 1, 0 ],\n                    [ 0, 0, 1 ]\n                ],\n                m2: [\n                    [ 1, 2, 3 ],\n                    [ 4, 5, 6 ],\n                    [ 7, 8, 9 ]\n                ],\n                expected: [\n                    [ 1, 2, 3 ],\n                    [ 4, 5, 6 ],\n                    [ 7, 8, 9 ]\n                ]\n            },{\n                m1: [\n                    [ 1, 2, 3]\n                ],\n                m2: [\n                    [ 4 ],\n                    [ 5 ],\n                    [ 6 ]\n                ],\n                expected : [[ 32 ]]\n            }\n        ].forEach(data => {\n            var actual = tasks.getMatrixProduct(data.m1, data.m2);\n            assert.deepEqual(\n                actual,\n                data.expected,\n                `Product of [${data.m1}] x [${data.m2}] = [${data.expected}], but actual ${actual}`\n            )\n        });\n    });\n\n\n    it.optional('timespanToHumanString should return the human string representation of datetime period', () => {\n        [\n            {\n                startDate: '2000-01-01 01:00:00.100',\n                endDate:   '2000-01-01 01:00:00.200',\n                expected:  'a few seconds ago'\n            }, {\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 01:00:30.000',\n                expected:  'a few seconds ago'\n            }, {\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 01:00:45.000',\n                expected:  'a few seconds ago'\n            }, {\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 01:00:45.001',\n                expected:  'a minute ago'\n            }, {\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 01:01:00.000',\n                expected:  'a minute ago'\n            }, {\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 01:01:30.000',\n                expected:  'a minute ago'\n            }, {\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 01:01:30.001',\n                expected:  '2 minutes ago'\n            }, {\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 01:05:30.000',\n                expected:  '5 minutes ago'\n            },{\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 01:45:00.000',\n                expected:  '45 minutes ago'\n            },{\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 01:45:00.001',\n                expected:  'an hour ago'\n            },{\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 02:00:00.000',\n                expected:  'an hour ago'\n            },{\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 02:30:00.000',\n                expected:  'an hour ago'\n            },{\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 02:30:00.001',\n                expected:  '2 hours ago'\n            },{\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 05:30:00.000',\n                expected:  '4 hours ago'\n            },{\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 05:30:00.001',\n                expected:  '5 hours ago'\n            },{\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 23:00:00.000',\n                expected:  '22 hours ago'\n            },{\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-01 23:00:00.001',\n                expected:  'a day ago'\n            },{\n                startDate: '2000-01-01 01:00:00.000',\n                endDate:   '2000-01-02 01:00:00.000',\n                expected:  'a day ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2000-01-02 12:00:00.000',\n                expected:  'a day ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2000-01-02 12:00:00.001',\n                expected:  '2 days ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2000-01-05 12:00:00.000',\n                expected:  '4 days ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2000-01-26 00:00:00.000',\n                expected:  '25 days ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2000-01-26 00:00:00.001',\n                expected:  'a month ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2000-02-01 00:00:00.000',\n                expected:  'a month ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2000-02-15 00:00:00.000',\n                expected:  'a month ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2000-02-16 00:00:00.000',\n                expected:  '2 months ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2000-05-20 00:00:00.000',\n                expected:  '5 months ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2000-12-10 00:00:00.000',\n                expected:  '11 months ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2000-12-12 00:00:00.000',\n                expected:  'a year ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2001-02-15 00:00:00.001',\n                expected:  'a year ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2001-06-01 00:00:00.001',\n                expected:  'a year ago'\n            },{\n                startDate: '2000-01-01 00:00:00.000',\n                endDate:   '2015-02-15 00:00:00.001',\n                expected:  '15 years ago'\n            }\n        ].forEach(data => {\n            var actual = tasks.timespanToHumanString(new Date(data.startDate), new Date(data.endDate));\n            assert.equal(\n                actual,\n                data.expected,\n                `timespanToHumanString('${data.startDate}', '${data.endDate}') shoud return '${data.expected}', but actually '${actual}'`\n            )\n        });\n    });\n\n\n    it.optional('evaluateTicTacToePosition should return the winner if defined', () => {\n        const X = 'X', O = '0';\n\n        function positionToSting(position) {\n            var result = '';\n            for(var i=0; i<3; i++) {\n                result += '-------------\\n| ';\n                for(var j=0; j<3; j++) {\n                    result += (position[i][j] ? position[i][j] : ' ')+' | ';\n                }\n                result += '\\n';\n            }\n            result+='-------------';\n            return result;\n        }\n\n        [[\n            [ X, X, X ],\n            [ O, O,   ],\n            [ O,  ,   ]\n         ],[\n            [  , O, O ],\n            [ X, X, X ],\n            [ O,  , O ]\n         ],[\n            [  ,  , O ],\n            [ O,  , O ],\n            [ X, X, X ]\n         ],[\n            [ X,  , O ],\n            [ X,  , O ],\n            [ X, O,   ]\n         ],[\n            [ O, X, O ],\n            [ X, X, O ],\n            [ O, X,   ]\n         ],[\n            [ O, O, X ],\n            [ X, O, X ],\n            [ O, X, X ]\n         ],[\n            [ X, O, O ],\n            [ X, X, O ],\n            [ O, X, X ]\n         ],[\n            [ O, O, X ],\n            [ X, X, O ],\n            [ X,  , O ]\n         ]\n        ].forEach(data => {\n            var actual = tasks.evaluateTicTacToePosition(data);\n            assert.equal(\n                actual,\n                X,\n                `Position: \\n${positionToSting(data)}\\n  The winner is X, but actually '${actual}'`\n            )\n        });\n\n        [[\n            [ O, O, O ],\n            [  , X, X ],\n            [ X,  ,   ]\n         ],[\n            [ X, X,   ],\n            [ O, O, O ],\n            [ X,  , X ]\n         ],[\n            [  ,  ,   ],\n            [ X,  , X ],\n            [ O, O, O ]\n         ],[\n            [ O,  , X ],\n            [ O, X, X ],\n            [ O, X,   ]\n         ],[\n            [ X, O, X ],\n            [ X, O, O ],\n            [ O, O, X ]\n         ],[\n            [ X, X, O ],\n            [ X, O, O ],\n            [  , X, O ]\n         ],[\n            [ O, X, X ],\n            [ X, O, X ],\n            [ O, X, O ]\n         ],[\n            [ X, X, O ],\n            [ X, O, X ],\n            [ O,  , X ]\n         ]\n        ].forEach(data => {\n            var actual = tasks.evaluateTicTacToePosition(data);\n            assert.equal(\n                actual,\n                O,\n                `Position: \\n${positionToSting(data)}\\n  The winner is O, but actually '${actual}'`\n            )\n        });\n\n        [[\n            [  ,  ,   ],\n            [  ,  ,   ],\n            [  ,  ,   ]\n         ],[\n            [ X,  ,   ],\n            [ O, O,   ],\n            [  ,  , X ]\n         ],[\n            [ X, O, X ],\n            [ X, O, X ],\n            [ O, X, O ]\n         ],[\n            [ X, O, X ],\n            [ O, X, X ],\n            [ O, X, O ]\n         ],[\n            [ X, O, X ],\n            [ O,  , O ],\n            [ X, O, X ]\n         ]\n        ].forEach(data => {\n            var actual = tasks.evaluateTicTacToePosition(data);\n            assert.equal(\n                actual,\n                undefined,\n                `Position: \\n${positionToSting(data)}\\n  The winner is undefined, but actually '${actual}'`\n            )\n        });\n    });\n\n});\n"]}