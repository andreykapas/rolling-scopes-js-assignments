{"version":3,"sources":["05-regex-tests.js"],"names":[],"mappings":"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","file":"05-regex-tests-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar tasks = require('../task/05-regex-tasks');\nit.optional = require('../extensions/it-optional');\n\ndescribe('05-regex-tasks', function() {\n\n    it.optional('getRegexForGuid should match the valid GUID', function () {\n        var result = tasks.getRegexForGuid();\n\n        [\n            '{3F2504E0-4F89-41D3-9A0C-0305E82C3301}',\n            '{21EC2020-3AEA-4069-A2DD-08002B30309D}',\n            '{0c74f13f-fa83-4c48-9b33-68921dd72463}'\n        ].forEach((str) => {\n            assert(\n                result.test(str),\n                `regex does not match '${str}'`\n            );\n        });\n\n        [\n            '{D44EF4F4-280B47E5-91C7-261222A59621}',\n            '{D1A5279D-B27D-4CD4-A05E-EFDH53D08E8D}',\n            '{5EDEB36C-9006-467A8D04-AFB6F62CD7D2}',\n            '677E2553DD4D43B09DA77414DB1EB8EA',\n            '0c74f13f-fa83-4c48-9b33-68921dd72463',\n            'The roof, the roof, the roof is on fire'\n        ].forEach((str) => {\n             assert(\n                 result.test(str) == false,\n                `regex matches '${str}'`\n             );\n        });\n\n    });\n\n\n    it.optional('getRegexForPitSpot should be implemeted according to task', function () {\n        var result = tasks.getRegexForPitSpot();\n\n        [ 'pit', 'spot', 'spate', 'slap two', 'respite' ].forEach((str) => {\n            assert(\n                result.test(str),\n                `regex does not match '${str}'`\n            );\n        });\n\n        [ ' pt', 'Pot', 'peat', 'part' ].forEach((str) => {\n            assert(\n                result.test(str) == false,\n                `regex matches '${str}'`\n            );\n        });\n\n        assert(\n            result.source.length < 13,\n            `regexp length should be < 13, actual ${result.source.length} `\n        );\n    });\n\n\n    it.optional('getRegexForIPv4 should match the valid IPv4', function () {\n        var result = tasks.getRegexForIPv4();\n\n        [\n            '0.0.0.0',\n            '127.0.0.1',\n            '10.10.1.1',\n            '46.61.155.237',\n            '010.234.015.001'\n        ].forEach((str) => {\n            assert(\n                result.test(str),\n                `regex does not match '${str}'`\n            );\n        });\n\n        [\n            '300.0.0.0',\n            '127.0.0.-1',\n            '23.24.25.26.27',\n            'Set dns to 8.8.8.8'\n        ].forEach((str) => {\n            assert(\n                result.test(str) == false,\n                `regex matches '${str}'`\n            );\n        });\n    });\n\n\n    it.optional('getRegexForSSN should match the valid SSN', function () {\n        var result = tasks.getRegexForSSN();\n\n        [\n            '123-45-6789',\n            '234-56-2349',\n            '875-43-0298',\n            '034-01-0008'\n        ].forEach((str) => {\n            assert(\n                result.test(str),\n                `regex does not match '${str}'`\n            );\n        });\n\n        [\n            '123456789',\n            '000-56-2349',\n            '875-00-0298',\n            '034-01-0000',\n            '0S4-H1-HACK'\n        ].forEach((str) => {\n            assert(\n                result.test(str) == false,\n                `regex matches '${str}'`\n            );\n        });\n\n    });\n\n\n    it.optional('getPasswordValidator should return the password validator', function () {\n        var result = tasks.getPasswordValidator(6);\n\n        [\n            'password',\n            'PASSWORD',\n            'pa55word',\n            'PASSW0RD',\n            'Pa55',\n            'Pa__W0rd',\n            '   PassW0rd    '\n        ].forEach((str) => {\n            assert(\n                !result.test(str),\n                `Regex matches '${str}'`\n            );\n        });\n\n        [\n            'PA55word',\n            'passW0rd',\n            'pa55W0rd',\n            'pa55wordPASSW0RD',\n            'a1A2b3B4'\n        ].forEach((str) => {\n            assert(\n                result.test(str),\n                `Regex does not match '${str}'`\n            );\n        });\n\n        assert(\n           !'abcdABCD1234'.match(tasks.getPasswordValidator(20)),\n           'Password validator do not validate minLength restriction'\n        );\n    });\n});\n"]}