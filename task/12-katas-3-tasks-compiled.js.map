{"version":3,"sources":["12-katas-3-tasks.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAS,yBAAT,CAAmC,MAAnC,EAA2C,SAA3C,EAAsD;AAClD,UAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CADkD;CAAtD;;;;;;;;;;;;;;AAiBA,UAAU,eAAV,CAA0B,KAA1B,EAAiC;AAC7B,UAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CAD6B;CAAjC;;;;;;;;;;;;;;;;;AAoBA,SAAS,4BAAT,CAAsC,MAAtC,EAA8C;AAC1C,UAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CAD0C;CAA9C;;;;;;;;;;;;;;;;AAmBA,SAAS,YAAT,GAAwB;AACpB,SAAK,eAAL,GAAuB,+BACA,4BADA,GAEA,kCAFA,CADH;CAAxB;;AAMA,aAAa,SAAb,GAAyB;;AAErB,YAAQ,UAAS,GAAT,EAAc;AAClB,cAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CADkB;KAAd;;AAIR,YAAQ,UAAS,IAAT,EAAe;AACnB,cAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CADmB;KAAf;CANZ;;AAYA,OAAO,OAAP,GAAiB;AACb,+BAA2B,yBAA3B;AACA,qBAAiB,eAAjB;AACA,kCAA8B,4BAA9B;AACA,kBAAc,YAAd;CAJJ","file":"12-katas-3-tasks-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Returns true if word occurrs in the specified word snaking puzzle.\n * Each words can be constructed using \"snake\" path inside a grid with top, left, right and bottom directions.\n * Each char can be used only once (\"snake\" should not cross itself).\n *\n * @param {array} puzzle\n * @param {array} searchStr\n * @return {bool}\n *\n * @example\n *   var puzzle = [ \n *      'ANGULAR',\n *      'REDNCAE',\n *      'RFIDTCL',\n *      'AGNEGSA',\n *      'YTIRTSP',\n *   ]; \n *   'ANGULAR'   => true   (first row)\n *   'REACT'     => true   (starting from the top-right R adn follow the ↓ ← ← ↓ )\n *   'UNDEFINED' => true\n *   'RED'       => true\n *   'STRING'    => true\n *   'CLASS'     => true\n *   'ARRAY'     => true   (first column)\n *   'FUNCTION'  => false\n *   'NULL'      => false \n */\nfunction findStringInSnakingPuzzle(puzzle, searchStr) {\n    throw new Error('Not implemented');\n}\n\n\n/**\n * Returns all permutations of the specified string.\n * Assume all chars in the specified string are different.\n * The order of permutations does not matter.\n * \n * @param {string} chars\n * @return {Iterable.<string>} all posible strings constructed with the chars from the specfied string\n *\n * @example\n *    'ab'  => 'ab','ba'\n *    'abc' => 'abc','acb','bac','bca','cab','cba'\n */\nfunction* getPermutations(chars) {\n    throw new Error('Not implemented');\n}\n\n\n/**\n * Returns the most profit from stock quotes.\n * Stock quotes are stores in an array in order of date.\n * The stock profit is the difference in prices in buying and selling stock.\n * Each day, you can either buy one unit of stock, sell any number of stock units you have already bought, or do nothing. \n * Therefore, the most profit is the maximum difference of all pairs in a sequence of stock prices.\n * \n * @param {array} quotes\n * @return {number} max profit\n *\n * @example\n *    [ 1, 2, 3, 4, 5, 6]   => 15  (buy at 1,2,3,4,5 and then sell all at 6)\n *    [ 6, 5, 4, 3, 2, 1]   => 0   (nothing to buy)\n *    [ 1, 6, 5, 10, 8, 7 ] => 18  (buy at 1,6,5 and sell all at 10)\n */\nfunction getMostProfitFromStockQuotes(quotes) {\n    throw new Error('Not implemented');\n}\n\n\n/**\n * Class representing the url shorting helper.\n * Feel free to implement any algorithm, but do not store link in the key\\value stores.\n * The short link can be at least 1.5 times shorter than the original url.\n * \n * @class\n *\n * @example\n *    \n *     var urlShortener = new UrlShortener();\n *     var shortLink = urlShortener.encode('https://en.wikipedia.org/wiki/URL_shortening');\n *     var original  = urlShortener.decode(shortLink); // => 'https://en.wikipedia.org/wiki/URL_shortening'\n * \n */\nfunction UrlShortener() {\n    this.urlAllowedChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"+\n                           \"abcdefghijklmnopqrstuvwxyz\"+\n                           \"0123456789-_.~!*'();:@&=+$,/?#[]\";\n}\n\nUrlShortener.prototype = {\n\n    encode: function(url) {\n        throw new Error('Not implemented');\n    },\n    \n    decode: function(code) {\n        throw new Error('Not implemented');\n    } \n}\n\n\nmodule.exports = {\n    findStringInSnakingPuzzle: findStringInSnakingPuzzle,\n    getPermutations: getPermutations,\n    getMostProfitFromStockQuotes: getMostProfitFromStockQuotes,\n    UrlShortener: UrlShortener\n};\n"]}