{"version":3,"sources":["01-strings-tasks.js"],"names":[],"mappings":"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","file":"01-strings-tasks-compiled.js","sourcesContent":["'use strict';\n\n/********************************************************************************************\n *                                                                                          *\n * Plese read the following tutorial before implementing tasks:                             *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String  *\n *                                                                                          *\n ********************************************************************************************/\n\n\n\n/**\n * Returns the result of concatenation of two strings.\n *\n * @param {string} value1\n * @param {string} value2\n * @return {string}\n *\n * @example\n *   'aa', 'bb' => 'aabb'\n *   'aa',''    => 'aa'\n *   '',  'bb'  => 'bb'\n */\nfunction concatenateStrings(value1, value2) {\n    return value1 + value2;\n}\n\n\n/**\n * Returns the length of given string.\n *\n * @param {string} value\n * @return {number}\n *\n * @example\n *   'aaaaa' => 5\n *   'b'     => 1\n *   ''      => 0\n */\nfunction getStringLength(value) {\n    return value.length;\n}\n\n/**\n * Returns the result of string template and given parameters firstName and lastName.\n * Please do not use concatenation, use template string :\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\n *\n * @param {string} firstName\n * @param {string} lastName\n * @return {string}\n *\n * @example\n *   'John','Doe'      => 'Hello, John Doe!'\n *   'Chuck','Norris'  => 'Hello, Chuck Norris!'\n */\nfunction getStringFromTemplate(firstName, lastName) {\n    return `Hello, ${firstName} ${lastName}!`;\n}\n\n/**\n * Extracts a name from template string 'Hello, First_Name Last_Name!'.\n *\n * @param {string} value\n * @return {string}\n *\n * @example\n *   'Hello, John Doe!' => 'John Doe'\n *   'Hello, Chuck Norris!' => 'Chuck Norris'\n */\nfunction extractNameFromTemplate(value) {\n    return value.slice(7, value.length - 1);\n}\n\n\n/**\n * Returns a first char of the given string.\n *\n * @param {string} value\n * @return {string}\n *\n * @example\n *   'John Doe'  => 'J'\n *   'cat'       => 'c'\n */\nfunction getFirstChar(value) {\n    return value.charAt(0);\n}\n\n/**\n * Removes a leading and trailing whitespace characters from string.\n *\n * @param {string} value\n * @return {string}\n *\n * @example\n *   '  Abracadabra'    => 'Abracadabra'\n *   'cat'              => 'cat'\n *   '\\tHello, World! ' => 'Hello, World!'\n */\nfunction removeLeadingAndTrailingWhitespaces(value) {\n    return value.trim();\n}\n\n/**\n * Returns a string that repeated the specified number of times.\n *\n * @param {string} value\n * @param {string} count\n * @return {string}\n *\n * @example\n *   'A', 5  => 'AAAAA'\n *   'cat', 3 => 'catcatcat'\n */\nfunction repeatString(value, count) {\n    return value.repeat(count);\n}\n\n/**\n * Remove the first occurrence of string inside another string\n * \n * @param {string} str\n * @param {string} value\n * @return {string}\n *\n * @example\n *   'To be or not to be', 'not'  => 'To be or to be'\n *   'I like legends', 'end' => 'I like legs',\n *   'ABABAB','BA' => 'ABAB'\n */\nfunction removeFirstOccurrences(str, value) {\n    return str.replace(value, \"\");\n}\n\n/**\n * Remove the first and last angle brackets from tag string\n *\n * @param {string} str\n * @return {string}\n *\n * @example\n *   '<div>' => 'div'\n *   '<span>' => 'span'\n *   '<a>' => 'a'\n */\nfunction unbracketTag(str) {\n    var newstr = str.replace('<', \"\");\n    return newstr.replace('>', \"\");\n}\n\n\n/**\n * Converts all characters of the specified string into the upper case\n *\n * @param {string} str\n * @return {string}\n *\n * @example\n *   'Thunderstruck' => 'THUNDERSTRUCK'\n *  'abcdefghijklmnopqrstuvwxyz' => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n */\nfunction convertToUpperCase(str) {\n    return str.toUpperCase();\n}\n\n/**\n * Extracts e-mails from single string with e-mails list delimeted by semicolons\n *\n * @param {string} str\n * @return {array}\n *\n * @example\n *   'angus.young@gmail.com;brian.johnson@hotmail.com;bon.scott@yahoo.com' => ['angus.young@gmail.com', 'brian.johnson@hotmail.com', 'bon.scott@yahoo.com']\n *   'info@gmail.com' => ['info@gmail.com']\n */\nfunction extractEmails(str) {\n    return str.split(\";\");\n}\n\n/**\n * Returns the string representation of rectangle with specified width and height\n * using pseudograhic chars\n *\n * @param {number} width\n * @param {number} height\n * @return {string}\n *\n * @example\n *\n *            '┌────┐\\n'+\n *  (6,4) =>  '│    │\\n'+\n *            '│    │\\n'+\n *            '└────┘\\n'\n *\n *  (2,2) =>  '┌┐\\n'+\n *            '└┘\\n'\n *\n *             '┌──────────┐\\n'+\n *  (12,3) =>  '│          │\\n'+\n *             '└──────────┘\\n'\n *\n */\nfunction getRectangleString(width, height) {\n    var str = \"┌\" + \"─\".repeat(width - 2) + \"┐\\n\";\n    var n;\n    for(n = 0; n < height - 2; n++) {\n        str += \"│\" + \" \".repeat(width - 2) + \"│\\n\";\n    }\n    str += \"└\" + \"─\".repeat(width - 2) + \"┘\\n\";\n    return str;\n}\n\n\n/**\n * Encode specified string with ROT13 cipher\n * See details:  https://en.wikipedia.org/wiki/ROT13\n *\n * @param {string} str\n * @return {string}\n *\n * @example\n *\n *   'hello' => 'uryyb'\n *   'Why did the chicken cross the road?' => 'Jul qvq gur puvpxra pebff gur ebnq?'\n *   'Gb trg gb gur bgure fvqr!' => 'To get to the other side!'\n *   'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' => 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm'\n *\n */\nfunction encodeToRot13(str) {\n    throw new Error('Not implemented');\n}\n\n/**\n * Returns true if the value is string; otherwise false.\n * @param {string} value\n * @return {boolean}\n *\n * @example\n *   isString() => false\n *   isString(null) => false\n *   isString([]) => false\n *   isString({}) => false\n *   isString('test') => true\n *   isString(new String('test')) => true\n */\nfunction isString(value) {\n    throw new Error('Not implemented');\n}\n\n\n/**\n * Returns playid card id.\n * \n * Playing cards inittial deck inclides the cards in the following order:\n * \n *  'A♣','2♣','3♣','4♣','5♣','6♣','7♣','8♣','9♣','10♣','J♣','Q♣','K♣',\n *  'A♦','2♦','3♦','4♦','5♦','6♦','7♦','8♦','9♦','10♦','J♦','Q♦','K♦',\n *  'A♥','2♥','3♥','4♥','5♥','6♥','7♥','8♥','9♥','10♥','J♥','Q♥','K♥',\n *  'A♠','2♠','3♠','4♠','5♠','6♠','7♠','8♠','9♠','10♠','J♠','Q♠','K♠'\n * \n * (see https://en.wikipedia.org/wiki/Standard_52-card_deck)\n * Function returns the zero-based index of specified card in the initial deck above.\n * \n * @param {string} value\n * @return {number}\n *\n * @example\n *   'A♣' => 0\n *   '2♣' => 1 \n *   '3♣' => 2\n *     ...\n *   'Q♠' => 50\n *   'K♠' => 51\n */\nfunction getCardId(value) {\n    throw new Error('Not implemented');\n}\n\n\nmodule.exports = {\n    concatenateStrings: concatenateStrings,\n    getStringLength: getStringLength,\n    getStringFromTemplate: getStringFromTemplate,\n    extractNameFromTemplate: extractNameFromTemplate,\n    getFirstChar: getFirstChar,\n    removeLeadingAndTrailingWhitespaces: removeLeadingAndTrailingWhitespaces,\n    repeatString: repeatString,\n    removeFirstOccurrences: removeFirstOccurrences,\n    unbracketTag: unbracketTag,\n    convertToUpperCase: convertToUpperCase,\n    extractEmails: extractEmails,\n    getRectangleString: getRectangleString,\n    encodeToRot13: encodeToRot13,\n    isString: isString,\n    getCardId: getCardId\n};\n"]}